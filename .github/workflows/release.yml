# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Make Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      
    steps:
    - name: Check CMake version
      run: cmake --version
    - name: List installed Visual Studios
      run: Get-ChildItem "C:\Program Files\Microsoft Visual Studio"
    - name: List installed Windows SDKs
      run: dir "C:\Program Files (x86)\Windows Kits\10\Lib"

    - name: Detect latest Windows SDK version
      id: sdk
      shell: pwsh
      run: |
        $sdks = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\Lib" | 
                Where-Object { $_.Name -match '^\d+\.\d+\.\d+\.\d+$' } |
                Sort-Object Name -Descending
        $latest = $sdks[0].Name
        "Latest SDK: $latest"
        echo "sdkver=$latest" >> $env:GITHUB_OUTPUT
    
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: actions/checkout@v4
      with:
          submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/out" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake --preset x64-release
        -DCMAKE_SYSTEM_VERSION=${{ steps.sdk.outputs.sdkver }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/out/build/x64-release

    - name: Make Release
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path release
        Move-Item -Path examples -Destination release
        Move-Item -Path ImGui.lua -Destination release
        Move-Item -Path ImGuiStubs.lua -Destination release
        Move-Item -Path LuaImGui.dll -Destination release
        Move-Item -Path README.md -Destination release
        Move-Item -Path LICENSE -Destination release
        Compress-Archive -Path release -DestinationPath release_${{ github.event.release.tag_name }}.zip
    - name: Upload binaries to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
            release/**
      
